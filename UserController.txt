package progetto.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.node.ObjectNode;

import jakarta.validation.Valid;
import progetto.dao.SerieDao;
import progetto.helper.PasswordValidationException;
import progetto.helper.ResponseManager;
import progetto.model.SerieSalvata;
import progetto.model.User;
import progetto.service.UserService;

@RestController
@RequestMapping("/apis/user")
public class UserController {

	@Autowired
	private UserService userService;
	
	@PostMapping("/reg")
	public ObjectNode userRegistration(@Valid @RequestBody User user) {
		if(!Pattern.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,20}$", user.getPassword())) {
			throw new PasswordValidationException("Invalid password");
		}
		return userService.userRegistration(user);
	}
	
	@GetMapping("/get/{tkn}")
	public User getUserByToken(@PathVariable("tkn") String token) {
		return userService.getUserByToken(token);
	}
	
	@GetMapping("/get/all")
	public List<User> getUsers(){
		return userService.getUsers();
	}
	
	@PostMapping("/update/{tkn}")
	public ObjectNode updateUserData(@Valid @RequestBody User user, @PathVariable("tkn") String token) {
		if(!Pattern.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,20}$", user.getPassword())) {
			throw new PasswordValidationException("Invalid password");
		}
		return userService.updateUserData(user, token);
	}
	
	@DeleteMapping("/delete/{tkn}")
	public ObjectNode deleteUser(@PathVariable("tkn") String token) {
		return userService.deleteUser(token);
	}
	
	@PutMapping("/login")
	public ObjectNode userLoginCheck(@RequestBody User user) {
		return userService.userLoginCheck(user);
	}
	
	@GetMapping("/logout/{tkn}")
	public ObjectNode userLogout(@PathVariable("tkn") String token) {
		return userService.userLogout(token);
	}
	
	@PostMapping("/serie/save")
	public ObjectNode saveSerie(@RequestBody SerieSalvata serie) {
		return userService.saveFavorite(serie);
	}
	
	@PostMapping("/serie/modify/{id}")
	public ObjectNode updateSerieData(@RequestBody SerieSalvata serie, @PathVariable("id") String id) {
		return userService.updateSerieData(serie, id);
	}
	
	@GetMapping("/serie/get/{userid}{id}")
	public SerieSalvata getSerieByUserIdAndId(@PathVariable("userid") int userid, @PathVariable("id") int id) {
		return SerieDao.findByUser_idAndId(userid, id);
	}
	
	@ExceptionHandler(BindException.class)
	public ResponseEntity<Map<String, String>> handleValidationException(BindException e){
		Map<String, String> errors = new HashMap<>();
		e.getBindingResult().getFieldErrors().forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));
		return ResponseEntity.badRequest().body(errors);
	}
	
	@ExceptionHandler(PasswordValidationException.class)
	public ObjectNode handleValidationPasswordException(PasswordValidationException e) {
	    return new ResponseManager(404, e.getMessage()).getResponse();
	}

}
